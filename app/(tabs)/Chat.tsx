// app/(tabs)/Chat.tsx
import { useBottomTabBarHeight } from '@react-navigation/bottom-tabs';
import React, { useRef, useState } from 'react';
import {
  Dimensions,
  FlatList,
  Platform,
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

type Msg = { id: string; from: 'bot' | 'user'; text: string };

// C√°c c√¢u h·ªèi m·∫´u ‚Äì ch·ªânh s·ª≠a ·ªü ƒë√¢y
const QUICK = [
  'Ph√≠ ship bao nhi√™u?',
  'Giao h√†ng bao l√¢u?',
  'Gi·ªù m·ªü c·ª≠a?',
  'Ch√≠nh s√°ch ƒë·ªïi tr·∫£?',
  'T∆∞ v·∫•n size',
  'Theo d√µi ƒë∆°n h√†ng',
  'Li√™n h·ªá',
];


function replyFor(raw: string): string {
  const text = raw.toLowerCase();
  if (/(^|\s)(ch√†o|xin ch√†o|hi|hello)\b/.test(text))
    return 'Ch√†o b·∫°n üëã M√¨nh h·ªó tr·ª£: ph√≠ ship, giao h√†ng, gi·ªù m·ªü c·ª≠a, ƒë·ªïi tr·∫£, t∆∞ v·∫•n size‚Ä¶';
  if (text.includes('ph√≠ ship') || text.includes('v·∫≠n chuy·ªÉn') || text.includes('ship bao nhi√™u'))
    return 'Ph√≠ ship n·ªôi th√†nh 20‚Äì30k, ngo·∫°i t·ªânh 30‚Äì40k. ƒê∆°n t·ª´ 499k **free ship**.';
  if (text.includes('bao l√¢u') || text.includes('khi n√†o') || text.includes('giao h√†ng'))
    return 'Giao n·ªôi th√†nh 1‚Äì2 ng√†y, ngo·∫°i t·ªânh 2‚Äì4 ng√†y. C√≥ COD to√†n qu·ªëc.';
  if (text.includes('gi·ªù m·ªü') || text.includes('m·ªü c·ª≠a') || text.includes('gi·ªù l√†m vi·ªác'))
    return 'Gi·ªù ho·∫°t ƒë·ªông **08:00‚Äì22:00** m·ªói ng√†y.';
  if (text.includes('ƒë·ªïi') || text.includes('tr·∫£') || text.includes('ƒë·ªïi tr·∫£') || text.includes('return'))
    return 'ƒê·ªïi size/m·∫´u trong **7 ng√†y**, h√†ng c√≤n tag, ch∆∞a s·ª≠ d·ª•ng. ƒê·ªïi t·∫°i shop ho·∫∑c g·ª≠i chuy·ªÉn ph√°t.';
  if (text.includes('size') || text.includes('k√≠ch c·ª°'))
    return 'B·∫°n cho m√¨nh chi·ªÅu cao/c√¢n n·∫∑ng (vd 1m70/65kg) ƒë·ªÉ t∆∞ v·∫•n size chu·∫©n nh√©.';
  if (text.includes('ƒë∆°n h√†ng') || text.includes('m√£ ƒë∆°n') || text.includes('theo d√µi'))
    return 'B·∫°n g·ª≠i gi√∫p m√¨nh **m√£ ƒë∆°n** (vd MZ123456) ƒë·ªÉ m√¨nh ki·ªÉm tra t√¨nh tr·∫°ng ƒë∆°n.';
  if (text.includes('li√™n h·ªá') || text.includes('hotline') || text.includes('sƒët'))
    return 'Hotline/Zalo: 038 440 2256 ‚Äì h·ªó tr·ª£ 08:00‚Äì22:00 m·ªói ng√†y.';
  return 'M√¨nh ch∆∞a hi·ªÉu √Ω ü•∫. Ch·ªçn 1 c√¢u b√™n d∆∞·ªõi nh√©.';
}

export default function Chat() {
  const tabBarH = useBottomTabBarHeight();
  const insets = useSafeAreaInsets();
  const BOTTOM_OFFSET = Math.max(tabBarH, insets.bottom) + 6; // ƒë·ªôi panel l√™n kh·ªèi TabBar

 
  const PANEL_MAX_H = 180; 
  const BOTTOM_STACK_H = PANEL_MAX_H + 10; 

  const [messages, setMessages] = useState<Msg[]>([
    {
      id: '0',
      from: 'bot',
      text: 'Ch√†o b·∫°n üëã M√¨nh l√† tr·ª£ l√Ω c·ª≠a h√†ng. Ch·ªçn c√¢u h·ªèi b√™n d∆∞·ªõi nha.',
    },
  ]);
  const listRef = useRef<FlatList<Msg>>(null);

  const sendQuick = (q: string) => {
    const userMsg: Msg = { id: Date.now() + '', from: 'user', text: q };
    setMessages((m) => [...m, userMsg]);
    setTimeout(() => {
      const botMsg: Msg = { id: Date.now() + '_b', from: 'bot', text: replyFor(q) };
      setMessages((m) => [...m, botMsg]);
      listRef.current?.scrollToEnd({ animated: true });
    }, 250);
  };

  const renderItem = ({ item }: { item: Msg }) => (
    <View style={[styles.bubble, item.from === 'user' ? styles.me : styles.bot]}>
      <Text style={{ color: item.from === 'user' ? '#fff' : '#000' }}>{item.text}</Text>
    </View>
  );

  return (
    <View style={{ flex: 1, backgroundColor: '#ffd6d2' }}>
      {/* Header */}
      <View style={[styles.header, { paddingTop: insets.top + 1, paddingBottom: 20 }]}>
        <Text style={styles.headerTitle}>Tr·ª£ l√Ω c·ª≠a h√†ng</Text>
      </View>

      <FlatList
        ref={listRef}
        data={messages}
        keyExtractor={(it) => it.id}
        renderItem={renderItem}
        contentContainerStyle={{
          padding: 12,
          paddingBottom: BOTTOM_OFFSET + BOTTOM_STACK_H, // ch·ª´a ch·ªó cho panel d·ªçc + tabbar
        }}
        onContentSizeChange={() => listRef.current?.scrollToEnd({ animated: true })}
      />

      <View style={[styles.bottom, { bottom: BOTTOM_OFFSET }]}>
        <ScrollView
          showsVerticalScrollIndicator={false}
          style={{ maxHeight: PANEL_MAX_H }}
          contentContainerStyle={styles.listCol}
        >
          {QUICK.map((q) => (
            <TouchableOpacity key={q} style={styles.rowBtn} onPress={() => sendQuick(q)}>
              <Text style={styles.rowText}>{q}</Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
      </View>
    </View>
  );
}

const W = Dimensions.get('window').width;
const styles = StyleSheet.create({
  header: {
    backgroundColor: '#f66060ff',
    borderBottomLeftRadius: 30,
    borderBottomRightRadius: 30,
    alignItems: 'center',
    justifyContent: 'center',
  },
  headerTitle: {
    color: '#fff',
    fontSize: 20,
    fontWeight: '500',
    textAlign: 'center',
    letterSpacing: 0.2,
  },

  bubble: { maxWidth: W * 0.7, marginVertical: 6, padding: 10, borderRadius: 12 },
  me: { alignSelf: 'flex-end', backgroundColor: '#f66060ff', borderTopRightRadius: 4 },
  bot: { alignSelf: 'flex-start', backgroundColor: '#fff', borderTopLeftRadius: 4, borderWidth: 1, borderColor: '#eee' },

  bottom: {
    position: 'absolute',
    left: 0,
    right: 0,
    backgroundColor: '#ffd6d2',
    paddingHorizontal: 10,
    paddingVertical: 8,
  },
  listCol: { paddingBottom: 4, gap: 8 },
  rowBtn: {
    backgroundColor: '#fff',
    borderRadius: 14,
    paddingHorizontal: 14,
    paddingVertical: Platform.OS === 'ios' ? 10 : 8,
    borderWidth: 1,
    borderColor: '#eee',
  },
  rowText: { fontSize: 14, color: '#000' },
});
